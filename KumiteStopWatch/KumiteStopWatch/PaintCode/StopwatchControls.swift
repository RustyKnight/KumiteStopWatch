//
//  StopwatchControls.swift
//  KumiteStopwatch
//
//  Created by KaiZen Enterprises on 1/04/2016.
//  Copyright (c) 2016 KaiZen Enterprises. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StopwatchControls : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfStartControl: UIImage?
        static var startControlTargets: [AnyObject]?
        static var imageOfRunningControl: UIImage?
        static var runningControlTargets: [AnyObject]?
        static var imageOfPausedControl: UIImage?
        static var pausedControlTargets: [AnyObject]?
        static var imageOfRestControl: UIImage?
        static var restControlTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawStartControl() {
        //// Color Declarations
        let startBackgroundColor = UIColor(red: 0.000, green: 0.500, blue: 0.000, alpha: 1.000)
        let startForegrounColod = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 1, y: 1, width: 42, height: 42))
        startBackgroundColor.setStroke()
        outerPath.lineWidth = 1
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 3, y: 3, width: 38, height: 38))
        startBackgroundColor.setFill()
        innerPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 14, y: 9.25))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 34))
        bezierPath.addLineToPoint(CGPoint(x: 35.57, y: 21.63))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 9.25))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        startForegrounColod.setFill()
        bezierPath.fill()
    }

    public class func drawRunningControl() {
        //// Color Declarations
        let runningBackgroundColor = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let runningForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 1, y: 1, width: 42, height: 42))
        runningBackgroundColor.setStroke()
        outerPath.lineWidth = 1
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 3, y: 3, width: 38, height: 38))
        runningBackgroundColor.setFill()
        innerPath.fill()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 13, y: 10, width: 7, height: 24))
        runningForegroundColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 24, y: 10, width: 7, height: 24))
        runningForegroundColor.setFill()
        rectangle2Path.fill()
    }

    public class func drawPausedControl() {
        //// Color Declarations
        let pausedBackgrdounColor = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let pausedForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 1, y: 1, width: 42, height: 42))
        pausedBackgrdounColor.setStroke()
        outerPath.lineWidth = 1
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 3, y: 3, width: 38, height: 38))
        pausedBackgrdounColor.setFill()
        innerPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 14, y: 9.25))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 34))
        bezierPath.addLineToPoint(CGPoint(x: 35.57, y: 21.63))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 9.25))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        pausedForegroundColor.setFill()
        bezierPath.fill()
    }

    public class func drawRestControl() {
        //// Color Declarations
        let restBackgrdounColor = UIColor(red: 0.750, green: 0.750, blue: 0.000, alpha: 1.000)
        let restForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 1, y: 1, width: 42, height: 42))
        restBackgrdounColor.setStroke()
        outerPath.lineWidth = 1
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 3, y: 3, width: 38, height: 38))
        restBackgrdounColor.setFill()
        innerPath.fill()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 34, y: 11.35))
        bezierPath.addLineToPoint(CGPoint(x: 27.83, y: 11.35))
        bezierPath.addLineToPoint(CGPoint(x: 27.83, y: 17.44))
        bezierPath.lineCapStyle = .Round;

        restForegroundColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 21.66, y: 10))
        bezier2Path.addCurveToPoint(CGPoint(x: 10, y: 21.5), controlPoint1: CGPoint(x: 15.21, y: 10), controlPoint2: CGPoint(x: 10, y: 15.14))
        bezier2Path.addCurveToPoint(CGPoint(x: 21.66, y: 33), controlPoint1: CGPoint(x: 10, y: 27.86), controlPoint2: CGPoint(x: 15.21, y: 33))
        bezier2Path.addCurveToPoint(CGPoint(x: 33.31, y: 21.5), controlPoint1: CGPoint(x: 28.1, y: 33), controlPoint2: CGPoint(x: 33.31, y: 27.86))
        bezier2Path.addCurveToPoint(CGPoint(x: 29.47, y: 12.98), controlPoint1: CGPoint(x: 33.31, y: 18.12), controlPoint2: CGPoint(x: 31.81, y: 15.07))
        bezier2Path.addCurveToPoint(CGPoint(x: 27.97, y: 11.83), controlPoint1: CGPoint(x: 28.99, y: 12.57), controlPoint2: CGPoint(x: 28.51, y: 12.16))
        bezier2Path.lineCapStyle = .Round;

        restForegroundColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
    }

    //// Generated Images

    public class var imageOfStartControl: UIImage {
        if Cache.imageOfStartControl != nil {
            return Cache.imageOfStartControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            StopwatchControls.drawStartControl()

        Cache.imageOfStartControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStartControl!
    }

    public class var imageOfRunningControl: UIImage {
        if Cache.imageOfRunningControl != nil {
            return Cache.imageOfRunningControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            StopwatchControls.drawRunningControl()

        Cache.imageOfRunningControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRunningControl!
    }

    public class var imageOfPausedControl: UIImage {
        if Cache.imageOfPausedControl != nil {
            return Cache.imageOfPausedControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            StopwatchControls.drawPausedControl()

        Cache.imageOfPausedControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPausedControl!
    }

    public class var imageOfRestControl: UIImage {
        if Cache.imageOfRestControl != nil {
            return Cache.imageOfRestControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            StopwatchControls.drawRestControl()

        Cache.imageOfRestControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRestControl!
    }

    //// Customization Infrastructure

    @IBOutlet var startControlTargets: [AnyObject]! {
        get { return Cache.startControlTargets }
        set {
            Cache.startControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfStartControl)
            }
        }
    }

    @IBOutlet var runningControlTargets: [AnyObject]! {
        get { return Cache.runningControlTargets }
        set {
            Cache.runningControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfRunningControl)
            }
        }
    }

    @IBOutlet var pausedControlTargets: [AnyObject]! {
        get { return Cache.pausedControlTargets }
        set {
            Cache.pausedControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfPausedControl)
            }
        }
    }

    @IBOutlet var restControlTargets: [AnyObject]! {
        get { return Cache.restControlTargets }
        set {
            Cache.restControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfRestControl)
            }
        }
    }

}
