//
//  StopwatchControls.swift
//  KumiteStopwatch
//
//  Created by KaiZen Enterprises on 3/04/2016.
//  Copyright (c) 2016 KaiZen Enterprises. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StopwatchControls : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfStartControl: UIImage?
        static var startControlTargets: [AnyObject]?
        static var imageOfRunningControl: UIImage?
        static var runningControlTargets: [AnyObject]?
        static var imageOfPausedControl: UIImage?
        static var pausedControlTargets: [AnyObject]?
        static var imageOfRestControl: UIImage?
        static var restControlTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawStartControl() {
        //// Color Declarations
        let startBackgroundColor = UIColor(red: 0.000, green: 0.500, blue: 0.000, alpha: 1.000)
        let startForegrounColod = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 84, height: 84))
        startBackgroundColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 7, y: 7, width: 74, height: 74))
        startBackgroundColor.setFill()
        innerPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 26, y: 22))
        bezierPath.addLineToPoint(CGPoint(x: 26, y: 66))
        bezierPath.addLineToPoint(CGPoint(x: 70, y: 44))
        bezierPath.addLineToPoint(CGPoint(x: 26, y: 22))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        startForegrounColod.setFill()
        bezierPath.fill()
    }

    public class func drawRunningControl() {
        //// Color Declarations
        let runningBackgroundColor = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let runningForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 84, height: 84))
        runningBackgroundColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 7, y: 7, width: 74, height: 74))
        runningBackgroundColor.setFill()
        innerPath.fill()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 22, y: 22, width: 17, height: 44))
        runningForegroundColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 49, y: 22, width: 17, height: 44))
        runningForegroundColor.setFill()
        rectangle2Path.fill()
    }

    public class func drawPausedControl() {
        //// Color Declarations
        let pausedBackgrdounColor = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let pausedForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 84, height: 84))
        pausedBackgrdounColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 7, y: 7, width: 74, height: 74))
        pausedBackgrdounColor.setFill()
        innerPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 26, y: 22))
        bezierPath.addLineToPoint(CGPoint(x: 26, y: 66))
        bezierPath.addLineToPoint(CGPoint(x: 70, y: 44))
        bezierPath.addLineToPoint(CGPoint(x: 26, y: 22))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        pausedForegroundColor.setFill()
        bezierPath.fill()
    }

    public class func drawRestControl() {
        //// Color Declarations
        let restBackgrdounColor = UIColor(red: 0.750, green: 0.750, blue: 0.000, alpha: 1.000)
        let restForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Outer Drawing
        let outerPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 84, height: 84))
        restBackgrdounColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()


        //// Inner Drawing
        let innerPath = UIBezierPath(ovalInRect: CGRect(x: 7, y: 7, width: 74, height: 74))
        restBackgrdounColor.setFill()
        innerPath.fill()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 66, y: 24.59))
        bezierPath.addLineToPoint(CGPoint(x: 54.69, y: 24.59))
        bezierPath.addLineToPoint(CGPoint(x: 54.69, y: 36.24))
        bezierPath.lineCapStyle = .Round;

        restForegroundColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 43.37, y: 22))
        bezier2Path.addCurveToPoint(CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 31.55, y: 22), controlPoint2: CGPoint(x: 22, y: 31.84))
        bezier2Path.addCurveToPoint(CGPoint(x: 43.37, y: 66), controlPoint1: CGPoint(x: 22, y: 56.16), controlPoint2: CGPoint(x: 31.55, y: 66))
        bezier2Path.addCurveToPoint(CGPoint(x: 64.74, y: 44), controlPoint1: CGPoint(x: 55.19, y: 66), controlPoint2: CGPoint(x: 64.74, y: 56.16))
        bezier2Path.addCurveToPoint(CGPoint(x: 57.7, y: 27.69), controlPoint1: CGPoint(x: 64.74, y: 37.53), controlPoint2: CGPoint(x: 61.98, y: 31.71))
        bezier2Path.addCurveToPoint(CGPoint(x: 54.94, y: 25.49), controlPoint1: CGPoint(x: 56.82, y: 26.92), controlPoint2: CGPoint(x: 55.94, y: 26.14))
        bezier2Path.lineCapStyle = .Round;

        restForegroundColor.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()
    }

    //// Generated Images

    public class var imageOfStartControl: UIImage {
        if Cache.imageOfStartControl != nil {
            return Cache.imageOfStartControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
            StopwatchControls.drawStartControl()

        Cache.imageOfStartControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStartControl!
    }

    public class var imageOfRunningControl: UIImage {
        if Cache.imageOfRunningControl != nil {
            return Cache.imageOfRunningControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
            StopwatchControls.drawRunningControl()

        Cache.imageOfRunningControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRunningControl!
    }

    public class var imageOfPausedControl: UIImage {
        if Cache.imageOfPausedControl != nil {
            return Cache.imageOfPausedControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
            StopwatchControls.drawPausedControl()

        Cache.imageOfPausedControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPausedControl!
    }

    public class var imageOfRestControl: UIImage {
        if Cache.imageOfRestControl != nil {
            return Cache.imageOfRestControl!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
            StopwatchControls.drawRestControl()

        Cache.imageOfRestControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRestControl!
    }

    //// Customization Infrastructure

    @IBOutlet var startControlTargets: [AnyObject]! {
        get { return Cache.startControlTargets }
        set {
            Cache.startControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfStartControl)
            }
        }
    }

    @IBOutlet var runningControlTargets: [AnyObject]! {
        get { return Cache.runningControlTargets }
        set {
            Cache.runningControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfRunningControl)
            }
        }
    }

    @IBOutlet var pausedControlTargets: [AnyObject]! {
        get { return Cache.pausedControlTargets }
        set {
            Cache.pausedControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfPausedControl)
            }
        }
    }

    @IBOutlet var restControlTargets: [AnyObject]! {
        get { return Cache.restControlTargets }
        set {
            Cache.restControlTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StopwatchControls.imageOfRestControl)
            }
        }
    }

}
