//
//  StopwatchControls.swift
//  KumiteStopwatch
//
//  Created by KaiZen Enterprises on 6/04/2016.
//  Copyright (c) 2016 KaiZen Enterprises. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StopwatchControls : NSObject {
    
    //// Cache
    
    private struct Cache {
        static var imageOfStartControl: UIImage?
        static var startControlTargets: [AnyObject]?
        static var imageOfRunningControl: UIImage?
        static var runningControlTargets: [AnyObject]?
        static var imageOfPausedControl: UIImage?
        static var pausedControlTargets: [AnyObject]?
        static var imageOfRestControl: UIImage?
        static var restControlTargets: [AnyObject]?
    }
    
    //// Drawing Methods
    
    public class func drawStartControl() {
        //// Color Declarations
        let startBackgroundColor = UIColor(red: 0.000, green: 0.500, blue: 0.000, alpha: 1.000)
        let startForegrounColod = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Outer Drawing
        let outerPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 84, height: 84))
        startBackgroundColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()
        
        
        //// Inner Drawing
        let innerPath = UIBezierPath(ovalIn: CGRect(x: 7, y: 7, width: 74, height: 74))
        startBackgroundColor.setFill()
        innerPath.fill()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 26, y: 22))
        bezierPath.addLine(to: CGPoint(x: 26, y: 66))
        bezierPath.addLine(to: CGPoint(x: 70, y: 44))
        bezierPath.addLine(to: CGPoint(x: 26, y: 22))
        bezierPath.close()
        bezierPath.miterLimit = 4;
        
        startForegrounColod.setFill()
        bezierPath.fill()
    }
    
    public class func drawRunningControl() {
        //// Color Declarations
        let runningBackgroundColor = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let runningForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Outer Drawing
        let outerPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 84, height: 84))
        runningBackgroundColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()
        
        
        //// Inner Drawing
        let innerPath = UIBezierPath(ovalIn: CGRect(x: 7, y: 7, width: 74, height: 74))
        runningBackgroundColor.setFill()
        innerPath.fill()
        
        
        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 22, y: 22, width: 17, height: 44))
        runningForegroundColor.setFill()
        rectanglePath.fill()
        
        
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 49, y: 22, width: 17, height: 44))
        runningForegroundColor.setFill()
        rectangle2Path.fill()
    }
    
    public class func drawPausedControl() {
        //// Color Declarations
        let pausedBackgrdounColor = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let pausedForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Outer Drawing
        let outerPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 84, height: 84))
        pausedBackgrdounColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()
        
        
        //// Inner Drawing
        let innerPath = UIBezierPath(ovalIn: CGRect(x: 7, y: 7, width: 74, height: 74))
        pausedBackgrdounColor.setFill()
        innerPath.fill()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 26, y: 22))
        bezierPath.addLine(to: CGPoint(x: 26, y: 66))
        bezierPath.addLine(to: CGPoint(x: 70, y: 44))
        bezierPath.addLine(to: CGPoint(x: 26, y: 22))
        bezierPath.close()
        bezierPath.miterLimit = 4;
        
        pausedForegroundColor.setFill()
        bezierPath.fill()
    }
    
    public class func drawRestControl() {
        //// Color Declarations
        let restBackgrdounColor = UIColor(red: 0.750, green: 0.750, blue: 0.000, alpha: 1.000)
        let restForegroundColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Outer Drawing
        let outerPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 84, height: 84))
        restBackgrdounColor.setStroke()
        outerPath.lineWidth = 4
        outerPath.stroke()
        
        
        //// Inner Drawing
        let innerPath = UIBezierPath(ovalIn: CGRect(x: 7, y: 7, width: 74, height: 74))
        restBackgrdounColor.setFill()
        innerPath.fill()
        
        
        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 66, y: 24.59))
        bezierPath.addLine(to: CGPoint(x: 54.69, y: 24.59))
        bezierPath.addLine(to: CGPoint(x: 54.69, y: 36.24))
        bezierPath.lineCapStyle = .round;
        
        restForegroundColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 43.37, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 31.55, y: 22), controlPoint2: CGPoint(x: 22, y: 31.84))
        bezier2Path.addCurve(to: CGPoint(x: 43.37, y: 66), controlPoint1: CGPoint(x: 22, y: 56.16), controlPoint2: CGPoint(x: 31.55, y: 66))
        bezier2Path.addCurve(to: CGPoint(x: 64.74, y: 44), controlPoint1: CGPoint(x: 55.19, y: 66), controlPoint2: CGPoint(x: 64.74, y: 56.16))
        bezier2Path.addCurve(to: CGPoint(x: 57.7, y: 27.69), controlPoint1: CGPoint(x: 64.74, y: 37.53), controlPoint2: CGPoint(x: 61.98, y: 31.71))
        bezier2Path.addCurve(to: CGPoint(x: 54.94, y: 25.49), controlPoint1: CGPoint(x: 56.82, y: 26.92), controlPoint2: CGPoint(x: 55.94, y: 26.14))
        bezier2Path.lineCapStyle = .round;
        
        restForegroundColor.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()
    }
    
    public class func drawAka(strokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.986, green: 0.000, blue: 0.027, alpha: 1.000)
        
        //// Group 5
        //// Shape Drawing
        let shapePath = UIBezierPath()
        shapePath.move(to: CGPoint(x: 72.88, y: 268.4))
        shapePath.addCurve(to: CGPoint(x: 38.05, y: 219.94), controlPoint1: CGPoint(x: 69.98, y: 247.4), controlPoint2: CGPoint(x: 51.11, y: 221.56))
        shapePath.addCurve(to: CGPoint(x: 7.58, y: 207.02), controlPoint1: CGPoint(x: 24.99, y: 218.33), controlPoint2: CGPoint(x: 7.58, y: 207.02))
        shapePath.addCurve(to: CGPoint(x: 4.68, y: 234.48), controlPoint1: CGPoint(x: 7.58, y: 207.02), controlPoint2: CGPoint(x: 6.13, y: 218.33))
        shapePath.addCurve(to: CGPoint(x: 22.09, y: 278.09), controlPoint1: CGPoint(x: 3.23, y: 250.63), controlPoint2: CGPoint(x: -8.39, y: 258.71))
        shapePath.addCurve(to: CGPoint(x: 73.01, y: 269.67), controlPoint1: CGPoint(x: 51.94, y: 297.08), controlPoint2: CGPoint(x: 74.81, y: 289.71))
        shapePath.addCurve(to: CGPoint(x: 79.83, y: 265.48), controlPoint1: CGPoint(x: 74.87, y: 268.52), controlPoint2: CGPoint(x: 77.17, y: 267.1))
        shapePath.addCurve(to: CGPoint(x: 72.97, y: 269.28), controlPoint1: CGPoint(x: 77.19, y: 266.85), controlPoint2: CGPoint(x: 74.89, y: 268.13))
        shapePath.addCurve(to: CGPoint(x: 72.88, y: 268.4), controlPoint1: CGPoint(x: 72.94, y: 268.98), controlPoint2: CGPoint(x: 72.92, y: 268.7))
        shapePath.addLine(to: CGPoint(x: 72.88, y: 268.4))
        shapePath.close()
        shapePath.miterLimit = 4;
        
        shapePath.usesEvenOddFillRule = true;
        
        fillColor2.setFill()
        shapePath.fill()
        strokeColor.setStroke()
        shapePath.lineWidth = 1
        shapePath.stroke()
        
        
        //// Shape 2 Drawing
        let shape2Path = UIBezierPath()
        shape2Path.move(to: CGPoint(x: 278.47, y: 184.78))
        shape2Path.addCurve(to: CGPoint(x: 189, y: 206.34), controlPoint1: CGPoint(x: 261.54, y: 177.75), controlPoint2: CGPoint(x: 226.09, y: 189.41))
        shape2Path.addCurve(to: CGPoint(x: 166.77, y: 158.07), controlPoint1: CGPoint(x: 186.08, y: 184.66), controlPoint2: CGPoint(x: 176.01, y: 167.09))
        shape2Path.addCurve(to: CGPoint(x: 212.1, y: 151.99), controlPoint1: CGPoint(x: 185.43, y: 155.64), controlPoint2: CGPoint(x: 202.12, y: 153.44))
        shape2Path.addCurve(to: CGPoint(x: 268.67, y: 119.12), controlPoint1: CGPoint(x: 244.95, y: 147.21), controlPoint2: CGPoint(x: 305.59, y: 151.54))
        shape2Path.addCurve(to: CGPoint(x: 214.77, y: 120.38), controlPoint1: CGPoint(x: 250.34, y: 103.03), controlPoint2: CGPoint(x: 231.69, y: 115.48))
        shape2Path.addCurve(to: CGPoint(x: 167.14, y: 130.29), controlPoint1: CGPoint(x: 205.37, y: 123.1), controlPoint2: CGPoint(x: 193.7, y: 126.26))
        shape2Path.addCurve(to: CGPoint(x: 167.14, y: 130.17), controlPoint1: CGPoint(x: 167.14, y: 130.25), controlPoint2: CGPoint(x: 167.14, y: 130.21))
        shape2Path.addCurve(to: CGPoint(x: 166.24, y: 118.89), controlPoint1: CGPoint(x: 166.92, y: 127.25), controlPoint2: CGPoint(x: 166.61, y: 123.37))
        shape2Path.addCurve(to: CGPoint(x: 221.23, y: 60.06), controlPoint1: CGPoint(x: 207.01, y: 100.55), controlPoint2: CGPoint(x: 237.92, y: 68.49))
        shape2Path.addCurve(to: CGPoint(x: 177.16, y: 62.83), controlPoint1: CGPoint(x: 199.19, y: 48.93), controlPoint2: CGPoint(x: 180.27, y: 61.39))
        shape2Path.addCurve(to: CGPoint(x: 162.26, y: 65.88), controlPoint1: CGPoint(x: 175.67, y: 63.52), controlPoint2: CGPoint(x: 170.15, y: 64.59))
        shape2Path.addCurve(to: CGPoint(x: 161.79, y: 39.36), controlPoint1: CGPoint(x: 161.49, y: 53.03), controlPoint2: CGPoint(x: 161.14, y: 42.62))
        shape2Path.addCurve(to: CGPoint(x: 106.59, y: 1.07), controlPoint1: CGPoint(x: 163.06, y: 33.05), controlPoint2: CGPoint(x: 170.42, y: 3.63))
        shape2Path.addCurve(to: CGPoint(x: 122.75, y: 40.04), controlPoint1: CGPoint(x: 106.59, y: 1.07), controlPoint2: CGPoint(x: 116.86, y: 7.75))
        shape2Path.addCurve(to: CGPoint(x: 127.21, y: 70.97), controlPoint1: CGPoint(x: 124.87, y: 51.69), controlPoint2: CGPoint(x: 126.29, y: 61.92))
        shape2Path.addCurve(to: CGPoint(x: 57.62, y: 79.87), controlPoint1: CGPoint(x: 94.39, y: 75.42), controlPoint2: CGPoint(x: 57.62, y: 79.87))
        shape2Path.addCurve(to: CGPoint(x: 69.42, y: 90.64), controlPoint1: CGPoint(x: 57.62, y: 79.87), controlPoint2: CGPoint(x: 62.29, y: 92.11))
        shape2Path.addCurve(to: CGPoint(x: 128.63, y: 92.74), controlPoint1: CGPoint(x: 74.22, y: 89.64), controlPoint2: CGPoint(x: 103.29, y: 91.32))
        shape2Path.addCurve(to: CGPoint(x: 127.65, y: 120.16), controlPoint1: CGPoint(x: 128.92, y: 104.49), controlPoint2: CGPoint(x: 128.29, y: 113.34))
        shape2Path.addCurve(to: CGPoint(x: 94.64, y: 139.18), controlPoint1: CGPoint(x: 115.81, y: 126.9), controlPoint2: CGPoint(x: 103.42, y: 133.78))
        shape2Path.addCurve(to: CGPoint(x: 59.85, y: 142.64), controlPoint1: CGPoint(x: 84.07, y: 140.28), controlPoint2: CGPoint(x: 72.52, y: 141.43))
        shape2Path.addCurve(to: CGPoint(x: 15.33, y: 140.86), controlPoint1: CGPoint(x: 22.45, y: 146.2), controlPoint2: CGPoint(x: 15.33, y: 140.86))
        shape2Path.addCurve(to: CGPoint(x: 64.3, y: 172.02), controlPoint1: CGPoint(x: 34.61, y: 192.18), controlPoint2: CGPoint(x: 50.05, y: 175.59))
        shape2Path.addCurve(to: CGPoint(x: 118.38, y: 164.35), controlPoint1: CGPoint(x: 68.51, y: 170.97), controlPoint2: CGPoint(x: 91.35, y: 167.88))
        shape2Path.addCurve(to: CGPoint(x: 122.52, y: 178.96), controlPoint1: CGPoint(x: 120.84, y: 168.73), controlPoint2: CGPoint(x: 122.19, y: 173.81))
        shape2Path.addCurve(to: CGPoint(x: 109.09, y: 248.13), controlPoint1: CGPoint(x: 124.05, y: 202.33), controlPoint2: CGPoint(x: 116.74, y: 218.25))
        shape2Path.addCurve(to: CGPoint(x: 79.83, y: 265.48), controlPoint1: CGPoint(x: 97.22, y: 254.98), controlPoint2: CGPoint(x: 87.12, y: 261.03))
        shape2Path.addCurve(to: CGPoint(x: 107.9, y: 252.79), controlPoint1: CGPoint(x: 87.06, y: 261.72), controlPoint2: CGPoint(x: 96.79, y: 257.27))
        shape2Path.addCurve(to: CGPoint(x: 84.29, y: 348.55), controlPoint1: CGPoint(x: 103.46, y: 270.28), controlPoint2: CGPoint(x: 87.1, y: 331.02))
        shape2Path.addCurve(to: CGPoint(x: 121.91, y: 355.13), controlPoint1: CGPoint(x: 81.47, y: 366.08), controlPoint2: CGPoint(x: 118.01, y: 365.56))
        shape2Path.addCurve(to: CGPoint(x: 190.4, y: 391.5), controlPoint1: CGPoint(x: 135.58, y: 380.87), controlPoint2: CGPoint(x: 182.47, y: 402.83))
        shape2Path.addCurve(to: CGPoint(x: 195.04, y: 343.68), controlPoint1: CGPoint(x: 204.02, y: 372.04), controlPoint2: CGPoint(x: 196.65, y: 348.83))
        shape2Path.addCurve(to: CGPoint(x: 189.81, y: 230.18), controlPoint1: CGPoint(x: 192.11, y: 334.31), controlPoint2: CGPoint(x: 189.91, y: 268.94))
        shape2Path.addCurve(to: CGPoint(x: 238.59, y: 245.2), controlPoint1: CGPoint(x: 212.98, y: 227.76), controlPoint2: CGPoint(x: 232.03, y: 231.04))
        shape2Path.addCurve(to: CGPoint(x: 320.28, y: 255.27), controlPoint1: CGPoint(x: 254.09, y: 278.69), controlPoint2: CGPoint(x: 309.71, y: 306.95))
        shape2Path.addCurve(to: CGPoint(x: 278.47, y: 184.78), controlPoint1: CGPoint(x: 325.09, y: 231.83), controlPoint2: CGPoint(x: 299.26, y: 193.42))
        shape2Path.addLine(to: CGPoint(x: 278.47, y: 184.78))
        shape2Path.close()
        shape2Path.move(to: CGPoint(x: 126.95, y: 163.23))
        shape2Path.addCurve(to: CGPoint(x: 153.71, y: 159.76), controlPoint1: CGPoint(x: 135.76, y: 162.09), controlPoint2: CGPoint(x: 144.83, y: 160.91))
        shape2Path.addCurve(to: CGPoint(x: 161.71, y: 179.2), controlPoint1: CGPoint(x: 156.64, y: 165.73), controlPoint2: CGPoint(x: 160.85, y: 174.77))
        shape2Path.addCurve(to: CGPoint(x: 166.29, y: 217.22), controlPoint1: CGPoint(x: 163.6, y: 189.04), controlPoint2: CGPoint(x: 165.72, y: 199.42))
        shape2Path.addCurve(to: CGPoint(x: 133.1, y: 234.64), controlPoint1: CGPoint(x: 154.89, y: 222.92), controlPoint2: CGPoint(x: 143.67, y: 228.85))
        shape2Path.addCurve(to: CGPoint(x: 136.42, y: 204.08), controlPoint1: CGPoint(x: 134.5, y: 222.08), controlPoint2: CGPoint(x: 135.7, y: 211.23))
        shape2Path.addCurve(to: CGPoint(x: 126.95, y: 163.23), controlPoint1: CGPoint(x: 137.94, y: 189.05), controlPoint2: CGPoint(x: 133.19, y: 173.82))
        shape2Path.addLine(to: CGPoint(x: 126.95, y: 163.23))
        shape2Path.close()
        shape2Path.move(to: CGPoint(x: 155.37, y: 349.9))
        shape2Path.addCurve(to: CGPoint(x: 123.32, y: 348.98), controlPoint1: CGPoint(x: 153.82, y: 361.17), controlPoint2: CGPoint(x: 132.79, y: 353.18))
        shape2Path.addCurve(to: CGPoint(x: 123.16, y: 343.86), controlPoint1: CGPoint(x: 123.51, y: 346.99), controlPoint2: CGPoint(x: 123.44, y: 345.2))
        shape2Path.addCurve(to: CGPoint(x: 132.08, y: 243.86), controlPoint1: CGPoint(x: 121.84, y: 337.35), controlPoint2: CGPoint(x: 127.56, y: 284.71))
        shape2Path.addCurve(to: CGPoint(x: 166.37, y: 234.15), controlPoint1: CGPoint(x: 143.27, y: 240.1), controlPoint2: CGPoint(x: 154.96, y: 236.71))
        shape2Path.addCurve(to: CGPoint(x: 155.37, y: 349.9), controlPoint1: CGPoint(x: 165.89, y: 258.67), controlPoint2: CGPoint(x: 162.99, y: 294.29))
        shape2Path.addLine(to: CGPoint(x: 155.37, y: 349.9))
        shape2Path.close()
        shape2Path.miterLimit = 4;
        
        shape2Path.usesEvenOddFillRule = true;
        
        fillColor2.setFill()
        shape2Path.fill()
        strokeColor.setStroke()
        shape2Path.lineWidth = 1
        shape2Path.stroke()
    }
    
    public class func drawShiro(strokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Group 5
        //// Shape Drawing
        let shapePath = UIBezierPath()
        shapePath.move(to: CGPoint(x: 87.88, y: 127.25))
        shapePath.addCurve(to: CGPoint(x: 145.15, y: 98.92), controlPoint1: CGPoint(x: 118.59, y: 113.23), controlPoint2: CGPoint(x: 139.88, y: 107.38))
        shapePath.addCurve(to: CGPoint(x: 183.79, y: 52.72), controlPoint1: CGPoint(x: 175.31, y: 100.07), controlPoint2: CGPoint(x: 195.44, y: 78.66))
        shapePath.addCurve(to: CGPoint(x: 113.03, y: 26.91), controlPoint1: CGPoint(x: 172.14, y: 26.77), controlPoint2: CGPoint(x: 118.66, y: 29.82))
        shapePath.addCurve(to: CGPoint(x: 92.96, y: 2.51), controlPoint1: CGPoint(x: 107.41, y: 24), controlPoint2: CGPoint(x: 92.96, y: 2.51))
        shapePath.addLine(to: CGPoint(x: 98.64, y: 29.05))
        shapePath.addLine(to: CGPoint(x: 90.76, y: 12.93))
        shapePath.addCurve(to: CGPoint(x: 117.97, y: 87.12), controlPoint1: CGPoint(x: 77.87, y: 66.54), controlPoint2: CGPoint(x: 117.97, y: 87.12))
        shapePath.addCurve(to: CGPoint(x: 87.88, y: 127.25), controlPoint1: CGPoint(x: 117.97, y: 87.12), controlPoint2: CGPoint(x: 108.19, y: 114.37))
        shapePath.addLine(to: CGPoint(x: 87.88, y: 127.25))
        shapePath.close()
        shapePath.miterLimit = 4;
        
        shapePath.usesEvenOddFillRule = true;
        
        fillColor3.setFill()
        shapePath.fill()
        strokeColor.setStroke()
        shapePath.lineWidth = 1
        shapePath.stroke()
        
        
        //// Shape 2 Drawing
        let shape2Path = UIBezierPath()
        shape2Path.move(to: CGPoint(x: 266.92, y: 154.56))
        shape2Path.addCurve(to: CGPoint(x: 241.98, y: 126.78), controlPoint1: CGPoint(x: 271.15, y: 147.19), controlPoint2: CGPoint(x: 251.89, y: 133.92))
        shape2Path.addCurve(to: CGPoint(x: 181.04, y: 137.66), controlPoint1: CGPoint(x: 227.42, y: 116.28), controlPoint2: CGPoint(x: 188.42, y: 133.48))
        shape2Path.addCurve(to: CGPoint(x: 73.89, y: 159), controlPoint1: CGPoint(x: 176.09, y: 140.45), controlPoint2: CGPoint(x: 114.24, y: 151.8))
        shape2Path.addCurve(to: CGPoint(x: 2.13, y: 130.67), controlPoint1: CGPoint(x: 67.11, y: 143.86), controlPoint2: CGPoint(x: 48.5, y: 127.46))
        shape2Path.addCurve(to: CGPoint(x: 30.45, y: 199.89), controlPoint1: CGPoint(x: 2.13, y: 130.67), controlPoint2: CGPoint(x: 20.67, y: 143.06))
        shape2Path.addCurve(to: CGPoint(x: 43.23, y: 360.51), controlPoint1: CGPoint(x: 50.65, y: 317.21), controlPoint2: CGPoint(x: 38.99, y: 342.03))
        shape2Path.addCurve(to: CGPoint(x: 60.72, y: 393.01), controlPoint1: CGPoint(x: 44.76, y: 367.19), controlPoint2: CGPoint(x: 50.29, y: 383.43))
        shape2Path.addCurve(to: CGPoint(x: 92.72, y: 347.21), controlPoint1: CGPoint(x: 71.15, y: 402.59), controlPoint2: CGPoint(x: 96.28, y: 382.31))
        shape2Path.addCurve(to: CGPoint(x: 89.88, y: 321.05), controlPoint1: CGPoint(x: 92.08, y: 340.9), controlPoint2: CGPoint(x: 91.07, y: 331.8))
        shape2Path.addCurve(to: CGPoint(x: 115.58, y: 339.7), controlPoint1: CGPoint(x: 97.28, y: 327.3), controlPoint2: CGPoint(x: 112.71, y: 332.92))
        shape2Path.addCurve(to: CGPoint(x: 189.63, y: 366.96), controlPoint1: CGPoint(x: 119.28, y: 348.46), controlPoint2: CGPoint(x: 142.73, y: 353.33))
        shape2Path.addCurve(to: CGPoint(x: 195.18, y: 368.45), controlPoint1: CGPoint(x: 191.61, y: 367.53), controlPoint2: CGPoint(x: 193.45, y: 368.03))
        shape2Path.addCurve(to: CGPoint(x: 235.71, y: 373.91), controlPoint1: CGPoint(x: 192.18, y: 385.16), controlPoint2: CGPoint(x: 225.27, y: 382.01))
        shape2Path.addCurve(to: CGPoint(x: 251.72, y: 219.45), controlPoint1: CGPoint(x: 248.22, y: 364.22), controlPoint2: CGPoint(x: 254.42, y: 263.27))
        shape2Path.addCurve(to: CGPoint(x: 266.92, y: 154.56), controlPoint1: CGPoint(x: 250.08, y: 192.83), controlPoint2: CGPoint(x: 267.96, y: 167.2))
        shape2Path.addLine(to: CGPoint(x: 266.92, y: 154.56))
        shape2Path.close()
        shape2Path.move(to: CGPoint(x: 88.7, y: 310.47))
        shape2Path.addCurve(to: CGPoint(x: 81.94, y: 248.62), controlPoint1: CGPoint(x: 86.59, y: 291.6), controlPoint2: CGPoint(x: 84.11, y: 269.38))
        shape2Path.addCurve(to: CGPoint(x: 140.26, y: 255.01), controlPoint1: CGPoint(x: 103.22, y: 249.87), controlPoint2: CGPoint(x: 125.54, y: 254.36))
        shape2Path.addCurve(to: CGPoint(x: 88.7, y: 310.47), controlPoint1: CGPoint(x: 159.78, y: 255.87), controlPoint2: CGPoint(x: 102.17, y: 295.02))
        shape2Path.addLine(to: CGPoint(x: 88.7, y: 310.47))
        shape2Path.close()
        shape2Path.move(to: CGPoint(x: 206.89, y: 346.31))
        shape2Path.addCurve(to: CGPoint(x: 195.8, y: 330.94), controlPoint1: CGPoint(x: 203.23, y: 341.08), controlPoint2: CGPoint(x: 199.11, y: 335.69))
        shape2Path.addCurve(to: CGPoint(x: 97.06, y: 321.45), controlPoint1: CGPoint(x: 182.23, y: 311.47), controlPoint2: CGPoint(x: 103.24, y: 325.34))
        shape2Path.addCurve(to: CGPoint(x: 135.02, y: 294.19), controlPoint1: CGPoint(x: 90.89, y: 317.55), controlPoint2: CGPoint(x: 89.35, y: 316.58))
        shape2Path.addCurve(to: CGPoint(x: 208.14, y: 200.5), controlPoint1: CGPoint(x: 180.68, y: 271.8), controlPoint2: CGPoint(x: 224.19, y: 217.05))
        shape2Path.addCurve(to: CGPoint(x: 157.54, y: 213.15), controlPoint1: CGPoint(x: 192.1, y: 183.95), controlPoint2: CGPoint(x: 164.95, y: 208.28))
        shape2Path.addCurve(to: CGPoint(x: 80.32, y: 232.71), controlPoint1: CGPoint(x: 152.67, y: 216.35), controlPoint2: CGPoint(x: 109.4, y: 226.29))
        shape2Path.addCurve(to: CGPoint(x: 76.89, y: 179.81), controlPoint1: CGPoint(x: 77.65, y: 205.87), controlPoint2: CGPoint(x: 75.92, y: 184.13))
        shape2Path.addCurve(to: CGPoint(x: 77.32, y: 173.17), controlPoint1: CGPoint(x: 77.25, y: 178.21), controlPoint2: CGPoint(x: 77.45, y: 175.91))
        shape2Path.addCurve(to: CGPoint(x: 108.41, y: 171.33), controlPoint1: CGPoint(x: 85.59, y: 172.57), controlPoint2: CGPoint(x: 95.8, y: 171.94))
        shape2Path.addCurve(to: CGPoint(x: 230.49, y: 159.39), controlPoint1: CGPoint(x: 161.76, y: 168.71), controlPoint2: CGPoint(x: 188.21, y: 157.54))
        shape2Path.addCurve(to: CGPoint(x: 206.89, y: 346.31), controlPoint1: CGPoint(x: 229.02, y: 193.43), controlPoint2: CGPoint(x: 222.99, y: 306.38))
        shape2Path.addLine(to: CGPoint(x: 206.89, y: 346.31))
        shape2Path.close()
        shape2Path.miterLimit = 4;
        
        shape2Path.usesEvenOddFillRule = true;
        
        fillColor3.setFill()
        shape2Path.fill()
        strokeColor.setStroke()
        shape2Path.lineWidth = 1
        shape2Path.stroke()
    }
    
    //// Generated Images
    
    public class var imageOfStartControl: UIImage {
        if Cache.imageOfStartControl != nil {
            return Cache.imageOfStartControl!
        }
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
        StopwatchControls.drawStartControl()
        
        Cache.imageOfStartControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return Cache.imageOfStartControl!
    }
    
    public class var imageOfRunningControl: UIImage {
        if Cache.imageOfRunningControl != nil {
            return Cache.imageOfRunningControl!
        }
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
        StopwatchControls.drawRunningControl()
        
        Cache.imageOfRunningControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return Cache.imageOfRunningControl!
    }
    
    public class var imageOfPausedControl: UIImage {
        if Cache.imageOfPausedControl != nil {
            return Cache.imageOfPausedControl!
        }
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
        StopwatchControls.drawPausedControl()
        
        Cache.imageOfPausedControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return Cache.imageOfPausedControl!
    }
    
    public class var imageOfRestControl: UIImage {
        if Cache.imageOfRestControl != nil {
            return Cache.imageOfRestControl!
        }
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 88), false, 0)
        StopwatchControls.drawRestControl()
        
        Cache.imageOfRestControl = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return Cache.imageOfRestControl!
    }
    
    public class func imageOfAka(strokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 322, height: 396), false, 0)
        StopwatchControls.drawAka(strokeColor: strokeColor)
        
        let imageOfAka = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return imageOfAka!
    }
    
    public class func imageOfShiro(strokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 269, height: 396), false, 0)
        StopwatchControls.drawShiro(strokeColor: strokeColor)
        
        let imageOfShiro = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return imageOfShiro!
    }
    
    //// Customization Infrastructure
    
    @IBOutlet var startControlTargets: [AnyObject]! {
        get { return Cache.startControlTargets }
        set {
            Cache.startControlTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StopwatchControls.imageOfStartControl)
            }
        }
    }
    
    @IBOutlet var runningControlTargets: [AnyObject]! {
        get { return Cache.runningControlTargets }
        set {
            Cache.runningControlTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StopwatchControls.imageOfRunningControl)
            }
        }
    }
    
    @IBOutlet var pausedControlTargets: [AnyObject]! {
        get { return Cache.pausedControlTargets }
        set {
            Cache.pausedControlTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StopwatchControls.imageOfPausedControl)
            }
        }
    }
    
    @IBOutlet var restControlTargets: [AnyObject]! {
        get { return Cache.restControlTargets }
        set {
            Cache.restControlTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: StopwatchControls.imageOfRestControl)
            }
        }
    }
    
}
